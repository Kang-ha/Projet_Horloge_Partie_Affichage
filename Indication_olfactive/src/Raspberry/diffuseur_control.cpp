/*
========================================================================================
Fichier : diffuseur_control.cpp

Objectif :
Ce programme contr√¥le intelligemment une prise connect√©e TP-Link Tapo en fonction :
- des messages MQTT (pr√©sence ou commande manuelle)
- des √©v√©nements enregistr√©s en base de donn√©es MySQL

Fonctionnalit√©s :
- √âcoute MQTT sur les topics "presence" et "diffuseur"
- V√©rifie si une odeur est programm√©e √† l‚Äôinstant T (heure, jour, utilisateur)
- Active/d√©sactive la prise avec temporisation et robustesse

Technologies utilis√©es :
- MQTT (lib Paho)
- MySQL Connector/C++
- Commandes syst√®me (tapoctl + ping)
- C++ moderne (chrono, threads, smart pointers)

Ce fichier s‚Äôex√©cute en boucle infinie sur la Raspberry Pi. Il agit comme contr√¥leur ma√Ætre.
========================================================================================
*/

#include <iostream>                 // Pour affichage console
#include <cstdlib>                  // Pour std::system (ex√©cution de commandes shell)
#include <string>                   // Pour std::string
#include <array>                    // Pour std::array utilis√© dans popen
#include <thread>                   // Pour std::this_thread::sleep_for
#include <chrono>                   // Pour la temporisation en secondes
#include <ctime>                    // Pour r√©cup√©rer l‚Äôheure actuelle

// üì¶ Librairies MySQL Connector/C++
#include <mysql_driver.h>          // Pour obtenir un driver MySQL
#include <mysql_connection.h>      // Pour la connexion √† la base
#include <cppconn/driver.h>        // Interfaces du driver
#include <cppconn/exception.h>     // Gestion des erreurs SQL
#include <cppconn/statement.h>     // Requ√™tes SQL
#include <cppconn/resultset.h>     // R√©sultats des requ√™tes

#include <mqtt/async_client.h>     // Client MQTT asynchrone de la biblioth√®que Paho

// üìå Contr√¥le intelligent de la prise TP-Link Tapo via MQTT & MySQL

// Configuration MQTT
const std::string ADDRESS{"tcp://192.168.1.117:1883"}; // Adresse du broker MQTT
const std::string CLIENT_ID{"TapoControllerCpp"};      // ID du client MQTT
const std::string TOPIC_DIFFUSEUR{"horloge/olfactive/diffuseur"}; // Topic pour commandes manuelles
const std::string TOPIC_PRESENCE{"horloge/olfactive/presence"};   // Topic pour d√©tection de pr√©sence

// Configuration Tapo
const std::string IP = "192.168.1.102";                     // IP de la prise connect√©e
const std::string USER = "boutin.l@stjolorient.fr";         // Identifiant de connexion Tapo
const std::string PASS = "Voso1295";                        // Mot de passe Tapo

// √âtat actuel du diffuseur (vrai si allum√©, faux sinon)
bool etatDiffuseur = false;

bool checkConnection() {
    std::string cmd = "ping -c 1 -W 1 " + IP + " > /dev/null 2>&1"; // Commande ping vers la prise (1 essai, d√©lai 1s), redirig√©e vers null
    return (std::system(cmd.c_str()) == 0); // Ex√©cute la commande shell et retourne vrai si le ping r√©ussit (code retour = 0)
}

std::string getTapoState() {
    std::string cmd = "tapoctl info " + IP + " " + USER + " " + PASS + " | grep 'Power State'"; // Commande tapoctl filtr√©e pour l‚Äô√©tat
    std::array<char, 128> buffer;           // Buffer temporaire pour stocker les lignes lues
    std::string result;                     // Cha√Æne dans laquelle on construit le r√©sultat

    FILE* pipe = popen(cmd.c_str(), "r");   // Lance la commande et ouvre un flux pour lire sa sortie standard (comme un fichier)
    if (!pipe) return "ERROR";              // Si √©chec d‚Äôouverture, retourne "ERROR"

    while (fgets(buffer.data(), buffer.size(), pipe) != nullptr) {
        result += buffer.data();            // Ajoute chaque ligne lue au r√©sultat final
    }
    pclose(pipe);                           // Ferme le tube (lib√®re les ressources)

    if (result.find("Power State: On") != std::string::npos) return "on";   // Si le texte contient "On", retourne "on"
    if (result.find("Power State: Off") != std::string::npos) return "off"; // Si le texte contient "Off", retourne "off"
    return "ERROR";                         // Sinon retourne "ERROR"
}

void executeTapoCommand(const std::string& command) {
    const int maxAttempts = 3;             // Nombre maximum de tentatives autoris√©es
    int attempt = 0;                       // Compteur de tentatives

    while (attempt < maxAttempts) {        // Boucle de tentatives
        if (!checkConnection()) {          // V√©rifie si la prise est joignable
            std::cerr << "[ERROR] Prise Tapo inaccessible (Tentative " << (attempt + 1) << ")\n"; // Affiche une erreur
            std::this_thread::sleep_for(std::chrono::seconds(5)); // Attend 5 secondes avant de r√©essayer
            attempt++;                     // Incr√©mente la tentative
            continue;                      // Passe √† la tentative suivante
        }

        std::string currentState = getTapoState();  // R√©cup√®re l‚Äô√©tat actuel
        if (currentState == "ERROR") {     // Si l‚Äô√©tat est inconnu
            std::cerr << "[ERROR] √âtat actuel inconnu. Tentative " << (attempt + 1) << "\n"; // Affiche une erreur
            std::this_thread::sleep_for(std::chrono::seconds(5)); // Attend avant de r√©essayer
            attempt++;
            continue;
        }

        if ((command == "on" && currentState == "off") || (command == "off" && currentState == "on")) {
            // Si la commande est coh√©rente avec un changement d‚Äô√©tat
            std::cout << "[INFO] Changement : " << currentState << " -> " << command << "\n";

            if (command == "off") {
                std::this_thread::sleep_for(std::chrono::seconds(5));  // Attente de s√©curit√© avant d‚Äô√©teindre
                if (getTapoState() == "off") {                         // Si la prise est d√©j√† √©teinte
                    std::cout << "[INFO] Prise d√©j√† √©teinte, annulation.\n";
                    return;                                           // Ne fait rien
                }
            }

            std::string cmd = "tapoctl " + command + " " + IP + " " + USER + " " + PASS; // Construit la commande tapoctl
            int result = std::system(cmd.c_str());  // Ex√©cute la commande

            if (result == 0) {
                std::cout << "[SUCCESS] Commande `" << command << "` ex√©cut√©e.\n"; // Succ√®s
                return;
            } else {
                std::cerr << "[ERROR] Commande `" << command << "` √©chou√©e.\n"; // √âchec
            }
        } else {
            // Aucun changement n√©cessaire (d√©j√† √† l‚Äô√©tat demand√©)
            std::cout << "[INFO] Aucune action n√©cessaire. Prise d√©j√† √† l'√©tat `" << currentState << "`.\n";
            return;
        }

        attempt++;                                       // Incr√©mente la tentative
        std::this_thread::sleep_for(std::chrono::seconds(5)); // Pause avant de r√©essayer
    }

    // √âchec total apr√®s plusieurs tentatives
    std::cerr << "[FATAL ERROR] Impossible d‚Äôex√©cuter `" << command << "` apr√®s " << maxAttempts << " tentatives.\n";
}

int isOdeurActiveNow() {
    try {
        sql::Driver* driver = get_driver_instance(); // R√©cup√®re le driver MySQL install√© sur le syst√®me
        std::unique_ptr<sql::Connection> conn(driver->connect("tcp://127.0.0.1:3306", "root", "horloge")); // √âtablit une connexion √† la base locale avec login root
        conn->setSchema("projet_horloge"); // S√©lectionne la base de donn√©es "projet_horloge"

        std::time_t now = std::time(nullptr); // R√©cup√®re l‚Äôheure syst√®me actuelle en timestamp
        std::tm* local = std::localtime(&now); // Convertit le timestamp en heure locale (struct tm)
        int minutesNow = local->tm_hour * 60 + local->tm_min; // Convertit l‚Äôheure actuelle en minutes depuis minuit
        int jourIndex = local->tm_wday == 0 ? 6 : local->tm_wday - 1; // Calcule l‚Äôindice du jour (0 = Lundi, 6 = Dimanche)

        // Construction de la requ√™te SQL pour v√©rifier si une odeur est active
        std::string query =
            "SELECT odeur FROM evenements "
            "WHERE " + std::to_string(minutesNow) + " >= debut " // Heure actuelle >= d√©but
            "AND " + std::to_string(minutesNow) + " < (debut + duree) " // Heure actuelle < fin
            "AND SUBSTRING(jour_semaine, " + std::to_string(jourIndex + 1) + ", 1) = '1' " // V√©rifie que le jour est actif dans le champ binaire
            "AND id_utilisateur = 70 " // Ne prend que les √©v√©nements de l‚Äôutilisateur 70
            "ORDER BY id DESC LIMIT 1"; // Ne r√©cup√®re que la derni√®re ligne correspondante

        std::cout << "[SQL] Requ√™te ex√©cut√©e :\n" << query << "\n"; // Affiche la requ√™te SQL dans le terminal pour debug

        std::unique_ptr<sql::Statement> stmt(conn->createStatement()); // Cr√©e un objet statement
        std::unique_ptr<sql::ResultSet> res(stmt->executeQuery(query)); // Ex√©cute la requ√™te et stocke le r√©sultat

        if (res->next()) { // Si une ligne a √©t√© trouv√©e
            int odeur = res->getInt("odeur"); // R√©cup√®re la valeur du champ "odeur"
            std::cout << "[BDD] Odeur active = " << odeur << "\n"; // Affiche le r√©sultat dans la console
            return odeur; // Retourne la valeur (0 ou 1)
        } else {
            std::cout << "[BDD] Aucun √©v√©nement actif √† cette heure pour ce jour.\n"; // Aucun √©v√©nement trouv√© dans la plage
            return -1; // Retourne -1 pour signaler absence de correspondance
        }

    } catch (sql::SQLException& e) { // En cas d'erreur SQL
        std::cerr << "[SQL ERROR] " << e.what() << "\n"; // Affiche l‚Äôerreur SQL
        return -1; // Retourne -1 en cas d‚Äô√©chec
    }
}

class TapoCallback : public virtual mqtt::callback { // D√©claration d‚Äôune classe qui h√©rite de l‚Äôinterface mqtt::callback
    std::chrono::steady_clock::time_point lastPresenceTime; // Stocke l‚Äôinstant o√π la pr√©sence a √©t√© d√©tect√©e
    bool presenceActuelle = false; // Indique si une pr√©sence est actuellement d√©tect√©e (en cours de temporisation)

public:
    void message_arrived(mqtt::const_message_ptr msg) override { // Surcharge de la m√©thode appel√©e √† la r√©ception d‚Äôun message MQTT
        std::string payload = msg->get_payload_str(); // R√©cup√®re le contenu du message MQTT
        for (char& c : payload) c = tolower(c); // Convertit tout en minuscules pour standardiser la comparaison

        if (msg->get_topic() == TOPIC_PRESENCE) { // Si le message vient du topic de pr√©sence
            std::cout << "[MQTT] Pr√©sence d√©tect√©e : " << payload << "\n"; // Affiche le message re√ßu dans la console

            if (payload == "presence detectee") { // Si le message indique qu‚Äôune pr√©sence est d√©tect√©e
                if (!presenceActuelle) { // Si ce n‚Äôest pas encore une pr√©sence en cours
                    lastPresenceTime = std::chrono::steady_clock::now(); // D√©marre le chrono de 10s
                    presenceActuelle = true; // Marque que la pr√©sence est active (d√©but de la temporisation)
                    std::cout << "[INFO] D√©but de la temporisation de pr√©sence...\n"; // Message de debug
                } else {
                    auto now = std::chrono::steady_clock::now(); // R√©cup√®re l‚Äôheure actuelle
                    auto duration = std::chrono::duration_cast<std::chrono::seconds>(now - lastPresenceTime).count(); // Calcule la dur√©e √©coul√©e depuis le d√©but
                    if (duration >= 10) { // Si 10 secondes se sont √©coul√©es avec d√©tection continue
                        std::cout << "[INFO] Pr√©sence confirm√©e apr√®s 10s.\n"; // Affiche que la pr√©sence est confirm√©e
                        int odeur = isOdeurActiveNow(); // V√©rifie si une odeur est n√©cessaire via la base de donn√©es
                        std::cout << "[DEBUG] Valeur retourn√©e par isOdeurActiveNow() = " << odeur << "\n"; // Affiche la valeur retourn√©e pour debug

                        if (odeur == 1) { // Si l‚Äôodeur est requise
                            std::cout << "[ACTION] Odeur requise -> activation du diffuseur.\n"; // Affiche l‚Äôaction entreprise
                            executeTapoCommand("on"); // Active la prise via tapoctl
                            etatDiffuseur = true; // Met √† jour l‚Äô√©tat local
                        } else {
                            std::cout << "[INFO] Odeur non requise ou √©v√©nement non valide -> extinction.\n"; // Sinon, on n‚Äôactive pas
                            if (etatDiffuseur) { // Si la prise √©tait allum√©e
                                executeTapoCommand("off"); // On l‚Äô√©teint
                                etatDiffuseur = false; // Mise √† jour de l‚Äô√©tat
                            }
                        }
                        presenceActuelle = false; // R√©initialise l‚Äô√©tat de pr√©sence
                    }
                }
            } else if (payload == "aucune presence") { // Si le message indique l'absence de pr√©sence
                presenceActuelle = false; // R√©initialise la pr√©sence
                if (etatDiffuseur) { // Si la prise √©tait active
                    std::cout << "[INFO] Pr√©sence absente -> extinction du diffuseur.\n"; // Message console
                    executeTapoCommand("off"); // √âteint la prise
                    etatDiffuseur = false; // Mise √† jour de l‚Äô√©tat
                }
            }

        } else if (msg->get_topic() == TOPIC_DIFFUSEUR) { // Si le message est une commande manuelle
            std::cout << "[MQTT] Commande manuelle re√ßue : " << payload << "\n"; // Affiche la commande
            if (payload == "on") { // Si la commande est "on"
                executeTapoCommand("on"); // Allume la prise
                etatDiffuseur = true; // Met √† jour l‚Äô√©tat
            } else if (payload == "off") { // Si la commande est "off"
                executeTapoCommand("off"); // √âteint la prise
                etatDiffuseur = false; // Mise √† jour
            } else {
                std::cerr << "[ERROR] Commande inconnue : " << payload << "\n"; // Si la commande n‚Äôest pas reconnue
            }
        }
    }
    void tick() {
        if (presenceActuelle) {
            auto now = std::chrono::steady_clock::now();
            auto duration = std::chrono::duration_cast<std::chrono::seconds>(now - lastPresenceTime).count();
            if (duration >= 10) {
                std::cout << "[INFO] Pr√©sence confirm√©e apr√®s 10s (v√©rification timer).\n";
                int odeur = isOdeurActiveNow();
                std::cout << "[DEBUG] Valeur retourn√©e par isOdeurActiveNow() = " << odeur << "\n";
    
                if (odeur == 1) {
                    std::cout << "[ACTION] Odeur requise -> activation du diffuseur.\n";
                    executeTapoCommand("on");
                    etatDiffuseur = true;
                } else {
                    std::cout << "[INFO] Odeur non requise ou √©v√©nement non valide -> extinction.\n";
                    if (etatDiffuseur) {
                        executeTapoCommand("off");
                        etatDiffuseur = false;
                    }
                }
                presenceActuelle = false; // R√©initialise
            }
        }
    }    
};

int main() {
    mqtt::async_client client(ADDRESS, CLIENT_ID); // Cr√©e un client MQTT asynchrone avec l'adresse du broker et un ID unique
    TapoCallback cb;                               // Instancie l'objet callback qui g√©rera les messages entrants
    client.set_callback(cb);                       // Associe le callback au client MQTT

    mqtt::connect_options connOpts;                // Cr√©e un objet d‚Äôoptions de connexion
    connOpts.set_clean_session(true);              // Sp√©cifie qu‚Äôon veut une session ‚Äúpropre‚Äù (pas de persistance des abonnements pr√©c√©dents)

    try {
        std::cout << "[MQTT] Connexion au broker...\n";     // Affiche que la connexion est en cours
        client.connect(connOpts)->wait();                   // Tente la connexion et attend qu‚Äôelle r√©ussisse
        std::cout << "[MQTT] Connect√© !\n";                 // Affiche le succ√®s

        client.subscribe(TOPIC_DIFFUSEUR, 1)->wait();       // S‚Äôabonne au topic "diffuseur" (qualit√© QoS 1)
        client.subscribe(TOPIC_PRESENCE, 1)->wait();        // S‚Äôabonne au topic "presence" (qualit√© QoS 1)

        while (true) {                                      // Boucle infinie principale
            std::this_thread::sleep_for(std::chrono::seconds(1)); // Attente passive de 1 seconde
            cb.tick();  // Appelle la v√©rification de pr√©sence chaque seconde
            // Aucun traitement ici : tout est pilot√© via le callback asynchrone
        }

        client.disconnect()->wait();                        // D√©connexion propre (non atteinte car boucle infinie)

    } catch (const mqtt::exception& exc) {                  // Gestion des erreurs de connexion MQTT
        std::cerr << "[MQTT] Erreur : " << exc.what() << "\n"; // Affiche l‚Äôerreur
        return 1;                                           // Quitte le programme avec une erreur
    }

    return 0; // Fin normale du programme (jamais atteinte ici)
}

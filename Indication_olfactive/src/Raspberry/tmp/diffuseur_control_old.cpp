#include <iostream>
#include <cstdlib>
#include <string>
#include <mqtt/async_client.h>
#include <array>
#include <thread>
#include <chrono>

/*
========================================================================================
üìå **Contr√¥le d'une prise TP-Link Tapo via MQTT**
========================================================================================

üîπ **Description :**
Ce programme permet de contr√¥ler une prise TP-Link Tapo (P100) via le protocole MQTT.
Il re√ßoit des commandes depuis un broker MQTT pour allumer ou √©teindre la prise en fonction de la pr√©sence d√©tect√©e.
Le programme interagit avec la prise en utilisant la commande `tapoctl`.

üîπ **Fonctionnement :**
1Ô∏è‚É£ **Connexion MQTT** :  
   - Se connecte au broker MQTT et s'abonne aux topics `horloge/olfactive/diffuseur` et `horloge/olfactive/presence`.
   - √âcoute les messages entrants pour allumer (`on`) ou √©teindre (`off`) la prise.

2Ô∏è‚É£ **Gestion des commandes ON/OFF** :  
   - V√©rifie l‚Äô√©tat actuel de la prise avant d'envoyer une commande (√©vite les actions inutiles).
   - Assure une protection contre les erreurs **403** en ajoutant un d√©lai avant la d√©sactivation.
   - Tente **jusqu'√† 3 fois** d‚Äôex√©cuter la commande en cas d‚Äô√©chec.

3Ô∏è‚É£ **V√©rifications & Robustesse** :  
   - V√©rifie la connexion r√©seau avant d‚Äôenvoyer une commande.
   - Convertit automatiquement les commandes re√ßues en **minuscule** pour √©viter les erreurs avec `tapoctl`.
   - G√®re les erreurs et affiche des logs d√©taill√©s pour le d√©bogage.

üîπ **Utilisation :**
- Le programme tourne en arri√®re-plan sur la **Raspberry Pi Affichage**.
- Il attend les commandes MQTT et les applique √† la prise en temps r√©el.
- Les logs permettent de surveiller le fonctionnement et les erreurs √©ventuelles.

========================================================================================
*/

// üîπ **Configuration MQTT**
const std::string ADDRESS{"tcp://192.168.1.117:1883"};
const std::string CLIENT_ID{"TapoControllerCpp"};
const std::string TOPIC_DIFFUSEUR{"horloge/olfactive/diffuseur"};
const std::string TOPIC_PRESENCE{"horloge/olfactive/presence"};

// üîπ **Configuration de la prise TP-Link Tapo**
const std::string IP = "192.168.1.102";
const std::string USER = "boutin.l@stjolorient.fr";
const std::string PASS = "Voso1295";

// üîπ **√âtat actuel du diffuseur**
bool etatDiffuseur = false;

// üîπ **V√©rifie si la prise est bien accessible (Ping)**
bool checkConnection() {
    std::string cmd = "ping -c 1 -W 1 " + IP + " > /dev/null 2>&1";
    return (std::system(cmd.c_str()) == 0);
}

// üîπ **R√©cup√®re l‚Äô√©tat actuel de la prise**
std::string getTapoState() {
    std::string cmd = "tapoctl info " + IP + " " + USER + " " + PASS + " | grep 'Power State'";
    std::array<char, 128> buffer;
    std::string result;
    
    FILE* pipe = popen(cmd.c_str(), "r");
    if (!pipe) return "ERROR";

    while (fgets(buffer.data(), buffer.size(), pipe) != nullptr) {
        result += buffer.data();
    }
    pclose(pipe);

    if (result.find("Power State: On") != std::string::npos) return "on";
    if (result.find("Power State: Off") != std::string::npos) return "off";
    return "ERROR";
}

// üîπ **Envoie une commande `on/off` avec gestion automatique des erreurs**
void executeTapoCommand(const std::string& command) {
    const int maxAttempts = 3;  // üîÅ Nombre maximal de tentatives en cas d'√©chec
    int attempt = 0;

    while (attempt < maxAttempts) {
        // üîé V√©rifier la connexion r√©seau
        if (!checkConnection()) {
            std::cerr << "[ERROR] Prise Tapo inaccessible (Tentative " << (attempt + 1) << "/" << maxAttempts << ")" << std::endl;
            std::this_thread::sleep_for(std::chrono::seconds(5));
            attempt++;
            continue;
        }

        std::string currentState = getTapoState();
        if (currentState == "ERROR") {
            std::cerr << "[ERROR] Impossible de r√©cup√©rer l‚Äô√©tat de la prise (Tentative " << (attempt + 1) << ")" << std::endl;
            std::this_thread::sleep_for(std::chrono::seconds(5));
            attempt++;
            continue;
        }

        // ‚öñÔ∏è V√©rification de l'√©tat avant de modifier la prise
        if ((command == "on" && currentState == "off") || (command == "off" && currentState == "on")) {
            std::cout << "[INFO] Changement d‚Äô√©tat d√©tect√© : " << currentState << " -> " << command << std::endl;

            // ‚è≥ Protection contre erreur 403 : V√©rification avant OFF
            if (command == "off") {
                std::cout << "[DEBUG] V√©rification avant d‚Äô√©teindre la prise..." << std::endl;
                std::this_thread::sleep_for(std::chrono::seconds(5));
                if (getTapoState() == "off") {
                    std::cout << "[INFO] La prise est d√©j√† √©teinte, annulation de la commande OFF." << std::endl;
                    return;
                }
            }

            // üì° Envoi de la commande tapoctl
            std::string cmd = "tapoctl " + command + " " + IP + " " + USER + " " + PASS;
            std::cout << "[DEBUG] Envoi de la commande tapoctl..." << std::endl;
            int result = std::system(cmd.c_str());

            if (result == 0) {
                std::cout << "[SUCCESS] Commande `" << command << "` ex√©cut√©e avec succ√®s." << std::endl;
                return;
            } else {
                std::cerr << "[ERROR] √âchec de la commande `" << command << "` (Tentative " << (attempt + 1) << ")" << std::endl;
            }
        } else {
            std::cout << "[INFO] Aucun changement n√©cessaire (√âtat actuel : " << currentState << ")." << std::endl;
            return;
        }

        std::this_thread::sleep_for(std::chrono::seconds(5));  // üîÑ Pause avant nouvelle tentative
        attempt++;
    }

    std::cerr << "[FATAL ERROR] Impossible d‚Äôex√©cuter `" << command << "` apr√®s " << maxAttempts << " tentatives." << std::endl;
}

// üîπ **Callback MQTT**
class TapoCallback : public virtual mqtt::callback {
public:
    void message_arrived(mqtt::const_message_ptr msg) override {
        std::string payload = msg->get_payload_str();
        std::cout << "[MQTT] Message re√ßu sur " << msg->get_topic() << " : " << payload << std::endl;

        // üîÑ Conversion en minuscule pour √©viter les erreurs
        for (char& c : payload) c = tolower(c);

        if (msg->get_topic() == TOPIC_DIFFUSEUR) {
            if (payload == "on") {
                executeTapoCommand("on");
                etatDiffuseur = true;
            } else if (payload == "off") {
                executeTapoCommand("off");
                etatDiffuseur = false;
            } else {
                std::cerr << "[ERROR] Commande inconnue re√ßue : `" << payload << "`" << std::endl;
            }
        } else if (msg->get_topic() == TOPIC_PRESENCE) {
            std::cout << "[INFO] Mise √† jour de l‚Äô√©tat de pr√©sence : " << payload << std::endl;
        } else {
            std::cerr << "[MQTT] Message non reconnu : " << payload << std::endl;
        }
    }
};

// üîπ **Programme principal**
int main() {
    // üì° Configuration du client MQTT
    mqtt::async_client client(ADDRESS, CLIENT_ID);
    TapoCallback cb;
    client.set_callback(cb);
    mqtt::connect_options connOpts;
    connOpts.set_clean_session(true);

    try {
        std::cout << "[MQTT] Connexion au broker MQTT..." << std::endl;
        auto tok = client.connect(connOpts);
        tok->wait();
        std::cout << "[MQTT] Connect√© au broker !" << std::endl;

        // üì° Abonnement aux topics MQTT
        client.subscribe(TOPIC_DIFFUSEUR, 1)->wait();
        client.subscribe(TOPIC_PRESENCE, 1)->wait();
        std::cout << "[MQTT] Abonn√© aux topics : " << TOPIC_DIFFUSEUR << " et " << TOPIC_PRESENCE << std::endl;

        // üîÑ Boucle principale : maintien de la connexion MQTT
        while (true) {
            std::this_thread::sleep_for(std::chrono::seconds(1));
        }

        client.disconnect()->wait();
    } catch (const mqtt::exception& exc) {
        std::cerr << "[MQTT] Erreur : " << exc.what() << std::endl;
        return 1;
    }

    return 0;
}
